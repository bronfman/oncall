<?php 
/**
 * @file
 * A module that lets people connect with an 'on call' team to report problems, and 
 * have team members communicate with each other as well as with the people. The module
 * uses the Twilio cloud communication service for interactivity over the phone and SMS
 *
 * @author  Jeremy Sullivan ("jersu", http://drupal.org/user/47878)
 */

/**
 * hook_menu()
 */
function oncall_menu() {
  // twilio endpoints
  $items['oncall/connect'] = array(
    'page callback' => 'oncall_twilio_connect',
    'access arguments' => array('oncall connect'),
    'type' => MENU_CALLBACK,
  );
  $items['oncall/dispatch'] = array(
    'page callback' => 'oncall_twilio_dispatch',
    'access arguments' => array('oncall connect'),
    'type' => MENU_CALLBACK,
  );
  $items['oncall/record/%'] = array(
    'page callback' => 'oncall_twilio_record',
    'page arguments' => array(2),
    'access arguments' => array('oncall connect'),
    'type' => MENU_CALLBACK,
  );
  $items['oncall/sms'] = array(
    'page callback' => 'oncall_twilio_sms',
    'access arguments' => array('oncall connect'),
    'type' => MENU_CALLBACK,
  );
  
  // drupal pages/callbacks
  $items['oncall/messages'] = array(
    'title' => 'On Call Messages',
    'descriptions' => 'Incoming voice recordings from the On Call service',
    'page callback' => 'oncall_page_messages',
    'access arguments' => array('oncall access messages'),
  );
  $items['oncall/listen/%'] = array(
    'page callback' => 'oncall_listen_message',
    'page arguments' => array(2),
    'access arguments' => array('oncall connect'),
    'type' => MENU_CALLBACK,
  );
  
  // admin pages
  $items['admin/config/services/oncall'] = array(
    'title' => 'On Call Config Page',
    'description' => 'Configure the site description, the number of items per feed and whether feeds should be titles/teasers/full-text.',
    'page callback' => 'oncall_page_config',
    'access arguments' => array('oncall admin'),
  );
  $items['admin/config/services/oncall/main'] = array(
    'title' => 'On Call Config Page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/oncall/extra'] = array(
    'title' => 'Additional On Call Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oncall_config_extra_form'),
    'access arguments' => array('oncall admin'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * hook_perm().
 */
function oncall_permission() {
  return array(
    'oncall admin' => array(
      'title' => t('Administer On Call Settings'), 
      'description' => t('Allow users to modify the On Call settings')
    ),
    'oncall access messages' => array(
      'title' => t('Leave Status Message'), 
      'description' => t('Using the telephone, allow users to leave a status message')
    ),
    
    // By design, a very open permision, that simply lets one interact with the service.
    // The anon role should be given this permission, otherwise, all phone connections
    // will be met with an error. Disabling this permission makes it easy to turn off
    // any telephone interaction immediately, for everyone.
    'oncall connect' => array(
      'title' => t('Use The On Call Service'), 
      'description' => t('Using the telephone, allow users to interact with our phone tree')
    ),
  );
}

/**
 * hook_theme()
 */
function oncall_theme() {
  return array(
    'oncall_audio' => array(
      'variables' => array('src' => NULL),
    ),
  );
}



/**
 * ##############################
 *     MENU HANDLERS
 * ##############################
 */

/**
 * Twilio initial greeting and phone tree
 * - welcome the caller and give them options
 */
function oncall_twilio_connect() {
  $twilio_conf = oncall_load_twilio_api();
  
  $team_numbers = oncall_get_team_numbers();
  $team_leader = oncall_get_team_leader();
  $say = "";
  
  // opt 1
  if (count($team_numbers)) {
    $say .= "To report a problem to the on call team, press 1. ";
  }
  
  // opt 2
  if ($team_leader) {
    $say .= "Press 2 to connect directly with the on call team leader. ";
  }
  
  // opt 3
  if (in_array($_REQUEST['From'], $team_numbers)) {
    $say .= "Press 3 to leave an update of the issue status. ";
  }
  
  if ($say) {
    $say .= "Press 0 to hear these options again. ";
  }
  
  $q = "SELECT message FROM {oncall_message} WHERE type = :type AND created > :time ORDER BY created";
  $args = array(
    ":type" => "status", 
    ":time" => REQUEST_TIME - variable_get('oncall_expire_status_msg', 86400)
  );
  $status_msg = db_query_range($q, 0, 1, $args)->fetchField();
      
  if (!$status_msg) {
    $status_msg = oncall_get_message('nostatus');
  }
  
  // build the response object 
  $response = new Services_Twilio_Twiml();
  $response->play(oncall_get_message('welcome'));
  
  if ($say) {
    $response->play($status_msg);
    $gather = $response->gather(array('numDigits' => 1, 'action' => '/oncall/dispatch'));
    $gather->say($say);
  }
  else {
    $response->say("There are currently no available members of the on call team. Sorry. Good bye.");
  }
  
  echo $response;
  return NULL;
}

/**
 * Twilio dispatch
 *  - our caller just told us what to do, now we do it
 */
function oncall_twilio_dispatch() {
  $twilio_conf = oncall_load_twilio_api();
  
  $choice = $_REQUEST['Digits'];
  $from = $_REQUEST['From'];  
  $leader_phone = oncall_get_team_leader();
  $team_numbers = oncall_get_team_numbers();
  
  // reset choice to 0, the default option, if problem choices are made
  if ($choice == 2 && !$leader_phone) {
    // if the caller press 2, confirm that the team leader is available to talk to
    $choice = 0;
  }
  elseif ($choice == 3 && !in_array($from, $team_numbers)) {
    // if the caller pressed 3, confirm that they are on the 'on call' team
    $choice = 0;
  }
    
  // build the response object
  $response = new Services_Twilio_Twiml();
  
  switch ($choice) {
    case 1:
      // leave a help message for the on call team
      $response->say("Record the current status after the tone, press pound when complete.");
      $response->record(array(
        'action' => '/oncall/record/help',
        'maxLength' => 30
      ));
      break;
      
    case 2:
      // connect directly with the on call team leader
      if ($from == $leader_phone) {
        $response->say("You are the leader. You can do many things, but you can't call yourself");
      }
      else {
        $response->dial($leader_phone);
        $response->say("The call failed or the remote party hung up. Goodbye.");  
      }
      break;
      
    case 3:
      // on call team member leaves a status update message
      $response->say("Record the current status after the tone, press pound when complete.");
      $response->record(array(
        'action' => '/oncall/record/status',
        'maxLength' => 30
      ));
      break;
      
    default:
      // if the caller pressed anything else, send them back home
      drupal_goto('oncall/connect');
  }
  
  echo $response;
  return NULL;
}

/**
 * Twilio recording redirect
 * - store the url of the twilio recording in our database
 */
function oncall_twilio_record($type) {
  $twilio_conf = oncall_load_twilio_api();
  
  $msgid = 0;
  if ($message = $_REQUEST['RecordingUrl']) {
    $msgid = db_insert('oncall_message')
     ->fields(array(
      'created' => REQUEST_TIME,
      'type' => $type,
      'message' => $message,
      'phone' => $_REQUEST['From'],
     ))
     ->execute();  
  }

  // if $type = 'help', send an SMS to the on call team
  if ($type == 'help' && $msgid) {
    oncall_send_sms_listen($msgid);
  }

  // build the response object
  $response = new Services_Twilio_Twiml();
  $response->say('Your message has been received, thank you.');
  echo $response;
  return NULL;
}

/**
 * Twilio SMS 
 * - Echo incoming SMS messages to everyone on on call team. Only team members
 *   can send SMS messages
 */
function oncall_twilio_sms() {
  $twilio_conf = oncall_load_twilio_api();
  
  $from = $_REQUEST['From'];
  $msg = $_REQUEST['Body'];
  $phone_number = variable_get('oncall_phone_number', '');
  $team_numbers = oncall_get_team_numbers();
  
  // Twilio Rest Client
  $config = twiliophp_config_load();
  $client = new Services_Twilio($twilio_conf['account_sid'], $twilio_conf['auth_token']);
  
  if (!in_array($from, $team_numbers)) {
    
    // only team members can send to this number. if they are not on the team, return a 'sorry' note
    $msg = "Sorry, only on call team members may send SMS messages on this service";
    $sms = $client->account->sms_messages->create(
      $phone_number,  // from our twilio number
      $from,          // return to sender
      $msg            // the sms sorry message
    );
    
  }
  else {
  
    // send an sms to everyone on the team
    foreach ($team_numbers as $number) {
      if ($number != $from ) {
        $sms = $client->account->sms_messages->create(
          $phone_number,  // from our twilio number
          $number,        // send to our team member
          $msg            // the sms message
        );
      }
    }
  }

  return NULL;
}

/**
 * OnCall Config Page
 * - List everyone on the team
 * - Present options for changing default settings
 */
function oncall_page_config() {
  // check that the Twilio library loads and that configuration settings have been set
  $info = libraries_load('twilio-php');
  if (!$info['loaded']) {
    drupal_set_message(t('The Twilio API for PHP library is not loading'), 'warning');
  }
  
  $twilio_config = twiliophp_config_load();
  if (!isset($twilio_config['account_sid'])) {
    drupal_set_message(t('The Twilio account settings for Account SID and Auth Token have not yet been set.'), 'warning'); 
  }
  
  // check that the On Call phone number has been set
  if (!variable_get('oncall_phone_number', "")) {
    drupal_set_message(t('You have not yet set an') . ' ' . l(t('application phone number.'), 'admin/config/services/oncall/extra'), 'warning');
  }

  $rows = array();
  $header = array(t('Person'), t('Phone Number'), t('Point Person'));
  foreach (oncall_get_team() as $member) {
    $lead = ($member['leader'] == 1) ? 'Yes' : 'No';
    $rows[] = array(l($member['name'], 'user/' . $member['uid']), $member['phone'], $lead);
  }
  
  $out  = "<h3>The On Call Team</h3>";
  $out .= theme('table', array('header' => $header, 'rows' => $rows));
  $out .= drupal_render(drupal_get_form('oncall_config_form'));
  
  return $out;
}

/**
 * OnCall Messages List
 *  - list all the voice messages that have come in on a single page
 *  - the list diferentiates 'help' messages and 'status' messages left by the team
 */
function oncall_page_messages() {
  // @TODO make this a pager query
  $result = db_query("SELECT type, created, message, phone FROM {oncall_message} ORDER BY created DESC");
  
  $rows = array();
  $header = array(t('Type'), t('Date/Time'), t('Message'), t('Left By'));
  foreach ($result as $msg) {
    $dte = format_date($msg->created, 'short');
    $audio = theme('oncall_audio', array('src' => $msg->message . '.mp3'));
    $rows[] = array($msg->type, $dte, $audio, $msg->phone);
  }
  
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Twilio Message ShortUrl
 *  - rather than send in SMS the very long Twilio URL where our voice message is stored,
 *    this menu handler lets us build a redirect based on a much shorter URL
 */
function oncall_listen_message($msgid) {
  $msgurl = db_query("SELECT message FROM {oncall_message} WHERE id = :id", array(':id' => $msgid))->fetchField();
    
  if ($msgurl) {
    // force mp3 output for browsers
    drupal_goto($msgurl . ".mp3");
  }
  else {
    return "that message doesn't exist";
  }
}


/**
 * #################################
 *    FORMS and FORM HANDLERS
 * #################################
 * cluster all these things togother
 */
 
/**
 * hook_form_alter()
 *  - add telephone number and availability to user edit page
 */
function oncall_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != 'user_profile_form') {
    return;
  }

  $account = $form['#user'];

  if (array_key_exists(variable_get('oncall_user_roll', 3), $account->roles)) {
    $oncall_user = oncall_user_settings($account->uid);
  
    $form['oncall'] = array(
      '#type' => 'fieldset',
      '#title' => t('On Call Settings'),
      '#weight' => 1,
    );
    
    $form['oncall']['oc_phone'] = array(
      '#type' => 'textfield', 
      '#title' => t('Phone Number'), 
      '#default_value' => isset($oncall_user->phone) ? $oncall_user->phone : '12065551212', 
      '#size' => 30, 
      '#maxlength' => 15, 
      '#description' => t('Enter the phone number you\'d like to have your OnCall SMS messages sent. Enter only numbers in this field, and include the country code. For US numbers, including the country code means starting with the number 1'),
    );
    
    $form['oncall']['oc_active'] = array(
      '#type' => 'radios',
      '#title' => t('OnCall Availability'),
      '#default_value' => isset($oncall_user->active) ? $oncall_user->active : 1,
      '#options' => array(0 => t('Away'), 1 => t('Available')),
      '#description' => t('When set to "Available", sms messages from the OnCall service may be sent to the telephone number given above.'),
    );

    $form['#validate'][] = 'oncall_user_form_validate';
    $form['#submit'][] = 'oncall_user_form_submit';
  } 
}
 
/**
 * Validate the phone number
 * - some phone validators found around the web
 */
function oncall_user_form_validate($form, &$form_state) {
  $phone_validator = array( 
    'us' => '/^(1([-\. ]?\d{3})[-\. ]?)?(\d{3})([-\. ]?\d{4})$/',
    'uk' => '/^(\44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$/',
    'uae' => '/^(\97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$/',
    'nz' => '/^\([0]\d{2}\))(\d{6,7}$/',
  );

  $validate = variable_get('oncall_validate_phone', 'none');
  if (isset($phone_validator[$validate])) {
    if (!preg_match($phone_validator[$validate], $form_state['values']['oc_phone'])) {
      form_set_error('oc_phone', t('That does not look like a valid telephone number'));
    }  
  }
}

/** 
 * Store the user data in our 'oncall_team' table
 */
function oncall_user_form_submit($form, &$form_state) {
  $account = $form['#user'];
  $phone = preg_replace('/\D/', '', $form_state['values']['oc_phone']);
  
  // find if this user is already in our table
  $exists = db_query("SELECT COUNT(*) as num FROM {oncall_team} WHERE uid = :uid", array(":uid" => $account->uid))->fetchField();

  if ($exists) {
    db_update('oncall_team') 
      ->fields(array(
        'phone' => $phone,
        'available' => $form_state['values']['oc_active'],
      ))
      ->condition('uid', $account->uid, '=')
      ->execute();
  }
  else {
    db_insert('oncall_team')
      ->fields(array(
        'uid' => $account->uid,
        'phone' => $phone,
        'available' => $form_state['values']['oc_active'],
      ))
      ->execute();
  }
} 

/**
 * OnCall config page settings
 */
function oncall_config_form($form, &$form_state) {
  $team = oncall_get_team();
  $team_select = array();
  $leader = 0;
  $oncall_role = user_role_load(variable_get('oncall_user_roll', 3));

  foreach ($team as $member) {
    if ($member['leader'] == 1) {
      $leader = $member['uid'];
    }
    $team_select[$member['uid']] = $member['name'];
  }
  
  // instruction for adding team members
  $ins  = "<p>To add members to your On Call team, follow these instructions:<ol>";
  $ins .= "<li>On Call members are Drupal Users. If your team member isn't already a Drupal User " . l('make them one.', 'admin/people/create') . "</li>";
  $ins .= "<li>From the " . l('user list page', 'admin/people') . ", check the box next to the names of the people to add to your team</li>";
  $ins .= "<li>Use the 'Update Options' drop down menu and under the sub-head 'Add a role to the selected users', select the option '" . $oncall_role->name . "'</li>";
  $ins .= "<li>Press the 'Update' button</li>";
  $ins .= "<li>Each team member needs to have a telephone number registered. Click the 'edit' option for the team member to add a phone number</li>";
  $ins .= "<li>Scroll to the section named 'On Call Settings', and enter the phone number there.</li>";  
  $ins .= "<li>Come back to this page - your team will be viewable in the table above</li>";
  $ins .= "</ol></p>";
  
  $form['oncall_info'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Instructions for Adding Members to your On Call Team'), 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );
  $form['oncall_info']['instructions'] = array(
    '#markup' => $ins,
  );
  
  // select team leader
  $form['oncall_point'] = array(
    '#type' => 'select', 
    '#title' => t('On Call Point Person'), 
    '#default_value' => $leader, 
    '#options' => $team_select, 
    '#empty_option' => t('No Leader'), 
    '#tree' => FALSE, 
    '#description' => t('Select the person who is leading the team. A caller to this service is given the option to connect directly to the leader. If no leader is selected, the direct connect option is not available.'),
  );
  
  // sms message
  $form['oncall_sms'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS Message Text'),
    '#description' => t('The message to be sent when a new help request comes in. Include the variable @url to include a link to listen to the message.'),
    '#default_value' => variable_get('oncall_sms_msg', 'A new help request has been received. Listen here @url'),
    '#rows' => 3,
  );
  
  // welcome message
  $form['welcome'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Welcome Message'), 
  );
  $form['welcome']['welcome_current'] = array(
    '#markup' => theme('oncall_audio', array('src' => oncall_get_message('welcome'))),
  );
  $form['welcome']['oncall_welcome'] = array(
    '#type' => 'file',
    '#size' => 22,
    '#description' => t('The mp3 audio file that will be played every time a person calls the On Call line.'),
  );
  
  // 'no status' message
  $form['nostatus'] = array(
    '#type' => 'fieldset', 
    '#title' => t('No New Status Message'), 
  );
  $form['nostatus']['nostatus_current'] = array(
    '#markup' => theme('oncall_audio', array('src' => oncall_get_message('nostatus'))), 
  );
  $form['nostatus']['oncall_nostatus'] = array(
    '#type' => 'file',
    '#size' => 22,
    '#description' => t('The mp3 audio file that will be played when there are no recent status messages to report.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

/**
 * OnCall config_form validator
 *  - check that the file has an mp3 extension
 */
function oncall_config_form_validate($form, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array('mp3'), 
  );

  // Save the 'welcome' message as a temporary file.
  $welcome = file_save_upload('oncall_welcome', $validators);
  if ($welcome === FALSE) {
    form_set_error('oncall_welcome', t('Not able to save that file. Make sure your files directory is writeable and that the file is an MP3'));
  }
  elseif ($welcome !== NULL) {
    $form_state['values']['oncall_welcome'] = $welcome;
  }

  // Save the 'welcome' message as a temporary file.
  $nostatus = file_save_upload('oncall_nostatus', $validators);
  if ($nostatus === FALSE) {
    form_set_error('oncall_nostatus', t('Not able to save that file. Make sure your files directory is writeable and that the file is an MP3'));
  }
  elseif ($nostatus !== NULL) {
    $form_state['values']['oncall_nostatus'] = $nostatus;
  }
}

/**
 * OnCall config_form submit handler
 *  - override the default variables
 *   - reset the leader
 *   - point to new audio files
 */
function oncall_config_form_submit($form, &$form_state) {
  // set all team members to zero, then update the team member to leader
  db_update('oncall_team')
    ->fields(array('leader' => 0))
    ->execute();

  db_update('oncall_team')
    ->fields(array('leader' => 1))
    ->condition('uid', $form_state['values']['oncall_point'], '=')
    ->execute();
    
  variable_set('oncall_sms_msg', $form_state['values']['oncall_sms']);

  $welcome_msg = $form_state['values']['oncall_welcome'];
  oncall_save_uploaded_message($welcome_msg, 'welcome');

  $nostatus_msg = $form_state['values']['oncall_nostatus'];
  oncall_save_uploaded_message($nostatus_msg, 'nostatus');
}

/**
 * OnCall config extra settings 
 *  - set additional variables
 */
function oncall_config_extra_form($form, &$form_state) {
  $form['intro'] = array(
    '#type' => 'item', 
    '#markup' => t('A few additional settings for the On Call module'),
  );

  $form['oncall_phone_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Phone Number'),
    '#default_value' => variable_get('oncall_phone_number', ''),
    '#description' => t('Your application phone number is your Twilio number that will be used to access this On Call module. This is needed here to send SMS messages.'),
  );

  $form['oncall_user_roll'] = array(
    '#type' => 'select', 
    '#title' => t('The User Role that tracks team members'), 
    '#default_value' => variable_get('oncall_user_roll', 2), 
    '#empty_option' => t('No Role'), 
    '#options' => user_roles(), 
    '#tree' => FALSE, 
    '#description' => t('Members of this User Role will be able to set their telephone number and be tracked as a part of the On Call team.'),
  );

  $form['oncall_validate_phone'] = array(
    '#type' => 'select', 
    '#title' => t('Phone Number Validation'), 
    '#default_value' => variable_get('oncall_validate_phone', 'none'), 
    '#empty_option' => t('No Validation'), 
    '#options' => array('us' => 'United States', 'uk' => 'United Kingdom', 'uae' => 'United Arab Emirates', 'nz' => 'New Zealand'), 
    '#tree' => FALSE, 
    '#description' => t('Should the phone number entered by team members be validated? And if so, what country phone number pattern should it be validated against?'),
  );

  // times are 6 hours, 12 hours, 18 hours, 1 day, 2 days, 1 week --- 6 hours = 6*60*60 = 21600
  $form['oncall_expire_status_msg'] = array(
    '#type' => 'select', 
    '#title' => t('Status Message Expiration'), 
    '#default_value' => variable_get('oncall_expire_status_msg', 86400), 
    '#options' => array(0 => t('Never')) + drupal_map_assoc(array(21600, 43200, 64800, 86400, 172800, 604800), 'format_interval'),
    '#tree' => FALSE,
    '#description' => t('How much time should pass before the most recent status message expires? Expired messages will not play on the phone message.'),
  );

  return system_settings_form($form);
}




/**
 * #############################
 *     HELPER FUNCTIONS
 * #############################
 * functions that assist in the operation of the module
 */

/**
 * Send SMS with link to 'help me' voicemail
 *  - when a 'help me' call comes in, we want the team to know about it right away
 */
function oncall_send_sms_listen($msgid) {
  $msg = variable_get('oncall_sms_msg', 'A new help request has been received. Listen here @url');
  $msg_data = array('@url' => url('oncall/listen/' . $msgid, array('absolute' => TRUE)));

  // Twilio Rest Client
  $config = twiliophp_config_load();
  $client = new Services_Twilio($config['account_sid'], $config['auth_token']);
 
  // get the team's phone numbers. 
  $team_numbers = oncall_get_team_numbers();
 
  // send an sms to everyone on the team
  foreach ($team_numbers as $number) {
    $sms = $client->account->sms_messages->create(
      variable_get('oncall_phone_number', ''),  // from our twilio number
      $number,                                  // send to our team member
      t($msg, $msg_data)                        // the sms message
    );
  }
} 

/**
 * Retreive the user settings
 */
function oncall_user_settings($uid) {
  return db_query("SELECT * FROM {oncall_team} WHERE uid = :uid", array(":uid" => $uid))->fetchObject();
}

/**
 * Return the URL for the requested 'canned' message
 */
function oncall_get_message($type = 'welcome') {
  $oncall_path = drupal_get_path('module', 'oncall') . "/sound/";
  $msgs = array(
    'welcome' => 'welcome.mp3',
    'nostatus' => 'no_recent_messages.mp3'
  );

  $file_fid = variable_get('oncall_' . $type, 0);
  if ($file_fid) {
    $file_path = file_load($file_fid)->uri;
    $file_url = file_create_url($file_path);
  }
  else {
    $file_path = $oncall_path . $msgs[$type];
    $file_url = url($file_path, array('absolute' => TRUE));
  }
  
   return $file_url;
} 

/**
 * Return the On Call team
 *  - only return the people who are both available and current members of the 
 *    'on call' user roll, and who are not blocked
 */
function oncall_get_team() {
  $team = &drupal_static(__FUNCTION__);
  
  if (!isset($team)) {
    $q  = "SELECT oc.uid, oc.phone, oc.leader, u.name ";
    $q .= "FROM {oncall_team} oc ";
    $q .= "JOIN {users_roles} ur ON ur.uid = oc.uid ";
    $q .= "JOIN {users} u ON u.uid = oc.uid ";
    $q .= "WHERE u.status = 1 ";
    $q .= "  AND oc.available = 1 ";
    $q .= "  AND ur.rid = :rid ";
    $args = array(":rid" => variable_get('oncall_user_roll', -1));
    
    $result = db_query($q, $args);
    $team = array();
    foreach ($result as $record) {
      $team[] = array('uid' => $record->uid, 'name' => $record->name, 'phone' => $record->phone, 'leader' => $record->leader);
    }
  }
  
  return $team;
}

/**
 * Return just the phone numbers for the On Call team
 *  - prepend each number with '+' for compare with twilio's phone number params (E.164)
 */
function oncall_get_team_numbers() {
  $numbers = &drupal_static(__FUNCTION__);
  
  if (!isset($numbers)) {
    $team = oncall_get_team();
    $numbers = array();
    foreach ($team as $member) {
      // add the plus (+) in front of each number
      $numbers[] = "+" . $member['phone'];
    }
  }
  
  return $numbers;
}

/**
 * Return the phone number for the team leader
 *  - return false if no team leader selected
 */
function oncall_get_team_leader() {
  if ($leader_phone = db_query("SELECT phone FROM {oncall_team} WHERE leader = 1")->fetchField()) {
    return "+" . $leader_phone;
  }
  else {
    return FALSE;
  }
}

/**
 * Save uploaded 'canned' messages
 *  - saves the default messages to the file system
 *  - helper function for the oncall_config_form save handler
 */
function oncall_save_uploaded_message($file, $name) {
  if (!empty($file->fid)) {
    if (!$file->status) {

      // Prepare the oncall directory.
      $msg_directory =  file_default_scheme() . '://oncall';
      file_prepare_directory($msg_directory, FILE_CREATE_DIRECTORY);
      $destination = file_stream_wrapper_uri_normalize($msg_directory . '/' . $name . '-' . REQUEST_TIME . '.mp3');

      // Move the temporary file into the final location.
      if ($file = file_move($file, $destination, FILE_EXISTS_RENAME)) {
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        variable_set('oncall_' . $name, $file->fid);
      }

    }
  }
}

/**
 * Load the Twilio PHP library
 * @return $twilio_config = array with SID and AUTH tokens
 */
function oncall_load_twilio_api() {
  $error = FALSE;

  $info = libraries_load('twilio-php');
  if (!$info['loaded']) {
    watchdog('oncall', 'Twilio API for PHP library did not load');
    $error = TRUE;
  }

  // @TODO: next step, validate that the incoming request is from the Twilio service
  // - http://www.twilio.com/docs/security
  // set error to TRUE if it doesn't validate
  
  if ($error) {
    // redirect to an twiml formatted error message
    $oncall_path = drupal_get_path('module', 'oncall');
    drupal_goto($oncall_path . '/error.xml');
    return NULL;
  }

  return twiliophp_config_load();
}

/**
 * Theme audio tag
 * - html5 audio tag. if browser doesn't support native mp3 playback, 
 *   it should show a link to the file
 */
function theme_oncall_audio($variables) {
  $src = $variables['src'];
  
  $out  = "<audio controls preload='auto' autobuffer>";
  $out .= "<source src='" . $src . "' type='audio/mp3' />";
  $out .= "<a href='" . $src . "'>Source MP3</a>";
  $out .= "</audio>";

  return $out;
}

